<?php

namespace App\Exceptions;

use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        if ($e instanceof AuthorizationException) {
            if ($request->expectsJson()) {
                return response()->error($e->getMessage() ?? 'You are not authorize to access this resource', 403, 403);
            }
        }

        if ($e instanceof ModelNotFoundException) {
            if ($request->expectsJson()) {
                return response()->error($e->getMessage(), 404, 404);
            }
        }


        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    /**
     * Override function from Handler class
     * Prepare a JSON response for the given exception.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Throwable  $e
     * @return \Illuminate\Http\JsonResponse
     */
    protected function prepareJsonResponse($request, \Throwable $e)
    {
        report($e);
        $message = $e->getMessage();
        $isModelNotFoundException = $e instanceof ModelNotFoundException;
        if($e instanceof HttpException || $isModelNotFoundException){
            $statusCode = $isModelNotFoundException ? 404 : $e->getStatusCode();
            switch ($statusCode) {
                case 401:
                    $message = !empty($message) ? $message : 'Unauthorized';
                    break;
                case 403:
                    $message =  !empty($message) ? $message : 'Forbidden';
                    break;
                case 404:
                    $message =  !empty($message) ? $message : 'Not Found';
                    break;
                case 405:
                    $message =  !empty($message) ? $message : 'Method Not Allowed';
                    break;
                case 500:
                    $message =  !empty($message) ? $message : 'Internal Error Server';
                    break;
                default:
                    $message = "Whoops, looks like something went wrong: {$message}";
                    break;
            }
            return response()->error($message, $statusCode, $statusCode);
        }
        else{
            return response()->error($message, 500, 500);
        }
    }
}
